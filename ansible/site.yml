---
- hosts: yum-server
  become: true
  vars:
    # Artifacts (passed from Jenkins)
    flask_artifact: ""
    node_artifact: ""

    # Database configuration
    db_host: "localhost"
    db_port: 5432
    db_name: "sharedappdb"
    db_user: "devops"
    db_password: "password"

    # ADD THESE MISSING PORT VARIABLES:
    flask_port: 5000
    node_port: 3000

    # Application settings
    app_directory: "/opt/apps"
    flask_workers: 2
    node_instances: 2

  pre_tasks:
  # Create application directories before roles run
  - name: Create application directories
    file:
      path: "{{ item }}"
      state: directory
      owner: ec2-user
      group: ec2-user
      mode: '0755'
    loop:
    - /opt/apps
    # NOTE: The directories /opt/flask_app and /opt/node_app are unnecessary
    # and conflict with the extraction path. Only the base directory /opt/apps
    # is needed, as the extracted content creates the subfolders.
    # We will keep them commented out for clarity but remove them from the loop.
    # - /opt/flask_app
    # - /opt/node_app

  roles:
  - postgres # Sets up PostgreSQL database
  - flask # Handles Flask deployment (if flask_artifact provided)
  - nodejs # Handles Node.js deployment (if node_artifact provided)
  # tasks: # <-- This section is now correctly empty

  post_tasks:
  # ------------------ Verification ------------------

  - name: Wait for Node.js app to start
    wait_for:
      port: "{{ node_port }}"
      host: 127.0.0.1
      delay: 10
      timeout: 60
    when: node_artifact != ""

  - name: Wait for Flask app to start
    wait_for:
      port: "{{ flask_port }}"
      host: 127.0.0.1
      delay: 5
      timeout: 60
    when: flask_artifact != ""

  - name: Test Node.js application
    uri:
      url: "http://127.0.0.1:{{ node_port }}"
      method: GET
      return_content: true
    register: node_test
    when: node_artifact != ""
    ignore_errors: true

  - name: Test Flask application
    uri:
      url: "http://127.0.0.1:{{ flask_port }}"
      method: GET
      return_content: true
    register: flask_test
    when: flask_artifact != ""
    ignore_errors: true

  - name: Display deployment results
    debug:
      msg:
      - " Deployment Summary:"
      - ""
      - " Services Status:"
      - "PostgreSQL:  Database '{{ db_name }}' ready"
      - "Flask: {{ ' Running on port ' + flask_port|string if flask_artifact != '' else ' Skipped (no artifact)' }}"
      - "Node.js: {{ ' Running on port ' + node_port|string + ' with PM2' if node_artifact != '' else ' Skipped (no artifact)' }}"
      - ""
      - " Access URLs:"
      - "{{ 'Flask: http://' + ansible_default_ipv4.address + ':' + flask_port|string if flask_artifact != '' else '' }}"
      - "{{ 'Node.js: http://' + ansible_default_ipv4.address + ':' + node_port|string if node_artifact != '' else '' }}"
      - ""
      - " Management Commands:"
      - "{{ 'Flask: sudo systemctl start/stop/restart flask_app.service' if flask_artifact != '' else '' }}"
      - "{{ 'Node.js: pm2 start/stop/restart node_app (as ec2-user)' if node_artifact != '' else '' }}"
